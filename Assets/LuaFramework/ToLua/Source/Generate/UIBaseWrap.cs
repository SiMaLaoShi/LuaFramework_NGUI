//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIBase), typeof(SubUIBase));
		L.RegFunction("SetAutoClose", SetAutoClose);
		L.RegFunction("DestroyAll", DestroyAll);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("AddSubWindow", AddSubWindow);
		L.RegFunction("RemoveSubWindow", RemoveSubWindow);
		L.RegFunction("AddOnClickListener", AddOnClickListener);
		L.RegFunction("AddOnPressListener", AddOnPressListener);
		L.RegFunction("AddOnDragListener", AddOnDragListener);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("beAutoClose", get_beAutoClose, set_beAutoClose);
		L.RegVar("beKeepDepth", get_beKeepDepth, set_beKeepDepth);
		L.RegVar("beMaskWin", get_beMaskWin, set_beMaskWin);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAutoClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
			obj.SetAutoClose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIBase.DestroyAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSubWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
			UIBase arg0 = (UIBase)ToLua.CheckObject<UIBase>(L, 2);
			obj.AddSubWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSubWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
			UIBase arg0 = (UIBase)ToLua.CheckObject<UIBase>(L, 2);
			obj.RemoveSubWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.AddOnClickListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.AddOnClickListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.AddOnClickListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnPressListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.AddOnPressListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.AddOnPressListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.AddOnPressListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnDragListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.AddOnDragListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UIBase obj = (UIBase)ToLua.CheckObject<UIBase>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.AddOnDragListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.AddOnDragListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beAutoClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool ret = obj.beAutoClose;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beAutoClose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beKeepDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool ret = obj.beKeepDepth;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beKeepDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beMaskWin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool ret = obj.beMaskWin;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beMaskWin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beAutoClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beAutoClose = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beAutoClose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beKeepDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beKeepDepth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beKeepDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beMaskWin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beMaskWin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beMaskWin on a nil value");
		}
	}
}


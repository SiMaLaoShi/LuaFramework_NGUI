//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SubUIBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SubUIBase), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Close", Close);
		L.RegFunction("SetAutoClose", SetAutoClose);
		L.RegFunction("SetUITexIcon", SetUITexIcon);
		L.RegFunction("CorrectPath", CorrectPath);
		L.RegFunction("ShowUI", ShowUI);
		L.RegFunction("SuspendUI", SuspendUI);
		L.RegFunction("ResumeUI", ResumeUI);
		L.RegFunction("HideUI", HideUI);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("ChangeUIType", ChangeUIType);
		L.RegFunction("AddLuaFunList", AddLuaFunList);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("anchor", get_anchor, set_anchor);
		L.RegVar("bdestory", get_bdestory, set_bdestory);
		L.RegVar("beUnique", get_beUnique, set_beUnique);
		L.RegVar("beUseLua", get_beUseLua, set_beUseLua);
		L.RegVar("bMainUI", get_bMainUI, set_bMainUI);
		L.RegVar("isFullUI", get_isFullUI, set_isFullUI);
		L.RegVar("childStates", get_childStates, set_childStates);
		L.RegVar("childUIs", get_childUIs, set_childUIs);
		L.RegVar("isHiedUI", get_isHiedUI, set_isHiedUI);
		L.RegVar("OnUIClosed", get_OnUIClosed, set_OnUIClosed);
		L.RegVar("type", get_type, set_type);
		L.RegVar("parentUI", get_parentUI, set_parentUI);
		L.RegVar("table", get_table, null);
		L.RegVar("State", get_State, set_State);
		L.RegVar("isOneLvUI", get_isOneLvUI, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAutoClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			obj.SetAutoClose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUITexIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			UITexture arg0 = (UITexture)ToLua.CheckObject<UITexture>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetUITexIcon(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CorrectPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.CorrectPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			obj.ShowUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SuspendUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			bool o = obj.SuspendUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			bool o = obj.ResumeUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			obj.HideUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeUIType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			UIType arg0 = (UIType)ToLua.CheckObject(L, 2, typeof(UIType));
			obj.ChangeUIType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaFunList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SubUIBase obj = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.AddLuaFunList(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_anchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase.Anchor ret = obj.anchor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index anchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bdestory(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.bdestory;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bdestory on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beUnique(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.beUnique;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beUnique on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beUseLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.beUseLua;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beUseLua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bMainUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.bMainUI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bMainUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isFullUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.isFullUI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isFullUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_childStates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Collections.Generic.List<bool> ret = obj.childStates;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index childStates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_childUIs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Collections.Generic.List<SubUIBase> ret = obj.childUIs;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index childUIs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isHiedUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.isHiedUI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHiedUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUIClosed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Action ret = obj.OnUIClosed;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUIClosed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			UIType ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_parentUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase ret = obj.parentUI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index parentUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_table(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			LuaInterface.LuaTable ret = obj.table;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index table on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase.WndState ret = obj.State;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOneLvUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool ret = obj.isOneLvUI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isOneLvUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_anchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase.Anchor arg0 = (SubUIBase.Anchor)ToLua.CheckObject(L, 2, typeof(SubUIBase.Anchor));
			obj.anchor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index anchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bdestory(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.bdestory = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bdestory on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beUnique(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beUnique = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beUnique on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beUseLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beUseLua = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beUseLua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bMainUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.bMainUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bMainUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isFullUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isFullUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isFullUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_childStates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Collections.Generic.List<bool> arg0 = (System.Collections.Generic.List<bool>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<bool>));
			obj.childStates = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index childStates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_childUIs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Collections.Generic.List<SubUIBase> arg0 = (System.Collections.Generic.List<SubUIBase>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<SubUIBase>));
			obj.childUIs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index childUIs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isHiedUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isHiedUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHiedUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUIClosed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.OnUIClosed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUIClosed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			UIType arg0 = (UIType)ToLua.CheckObject(L, 2, typeof(UIType));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_parentUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase arg0 = (SubUIBase)ToLua.CheckObject<SubUIBase>(L, 2);
			obj.parentUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index parentUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SubUIBase obj = (SubUIBase)o;
			SubUIBase.WndState arg0 = (SubUIBase.WndState)ToLua.CheckObject(L, 2, typeof(SubUIBase.WndState));
			obj.State = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}
}

